import { graphQLService } from "@/services/graphqlService";
import { AssetPriceRate, pricingService } from "@/services/pricingService";
import { AddressBalance } from "@ergo-graphql/types";
import BigNumber from "bignumber.js";
import { isEmpty } from "lodash-es";
import { NextResponse } from "next/server";

const ERG_DECIMALS = 9;
const TRACKED_ADDRESSES = [
  "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",
];

type TVLResponseObject =
  | {
      erg: number;
      usd: number;
    }
  | undefined;

export async function GET() {
  try {
    const [balance, rates] = await Promise.all([
      graphQLService.getBalance(TRACKED_ADDRESSES),
      pricingService.getTokenRates(),
    ]);

    const response = NextResponse.json(buildResponseObject(balance, rates));
    response.headers.set("Access-Control-Allow-Origin", "*");
    response.headers.set("Cache-Control", "max-age=0, s-maxage=120");

    return response;
  } catch (e: any) {
    NextResponse.json("message" in e ? e.message : e, { status: 500 });
  }
}

function buildResponseObject(balances: AddressBalance[], rates: AssetPriceRate): TVLResponseObject {
  if (isEmpty(rates) || isEmpty(rates)) {
    return undefined;
  }

  let acc = BigNumber(0);
  for (const balance of balances) {
    acc = acc.plus(decimalize(BigNumber(balance.nanoErgs), ERG_DECIMALS));
    for (const token of balance.assets) {
      const amount = decimalize(BigNumber(token.amount.toString()), token.decimals || 0);
      acc = acc.plus(amount.times(rates[token.tokenId]?.erg || 0));
    }
  }

  return {
    usd: acc.times(rates["ERG"].fiat).decimalPlaces(3).toNumber(),
    erg: acc.decimalPlaces(9).toNumber(),
  };
}

function decimalize(number: BigNumber, decimals?: number): BigNumber {
  if (!decimals) {
    return number;
  }

  return number.decimalPlaces(decimals).shiftedBy(decimals * -1);
}
